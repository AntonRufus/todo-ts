{"version":3,"sources":["Components/TodoTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoTask","task","completeTask","taskName","className","deadline","onClick","App","useState","setTask","setDeadline","todoList","setTodoList","handleChange","event","target","name","value","Number","taskNameToDelete","filter","type","placeholder","onChange","newTask","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAuBeA,EAfE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,aAIxB,MAHsB,KAAlBD,EAAKE,WACPF,EAAKE,SAAW,QAGhB,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,+BAAOH,EAAKE,WACZ,+BAAOF,EAAKI,cAEd,wBAAQC,QAAS,kBAAMJ,EAAaD,EAAKE,WAAzC,mBC6CSI,EA1DC,WACd,MAAwBC,mBAAiB,IAAzC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAAgCD,mBAAiB,GAAjD,mBAAOH,EAAP,KAAiBK,EAAjB,KACA,EAAgCF,mBAAkB,IAAlD,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAACC,GACM,SAAtBA,EAAMC,OAAOC,KACfP,EAAQK,EAAMC,OAAOE,OAErBP,EAAYQ,OAAOJ,EAAMC,OAAOE,SAW9Bf,EAAe,SAACiB,GACpBP,EACED,EAASS,QAAO,SAACnB,GACf,OAAOA,EAAKE,WAAagB,OAK/B,OACE,sBAAKf,UAAU,MAAf,UACE,yBAAQA,UAAU,SAAlB,UACE,sBAAKA,UAAU,iBAAf,UACE,uBACEiB,KAAK,OACLC,YAAY,OACZN,KAAK,OACLC,MAAOhB,EACPsB,SAAUV,IAEZ,uBACEQ,KAAK,SACLC,YAAY,qBACZN,KAAK,WACLC,MAAOZ,EACPkB,SAAUV,OAGd,wBAAQP,QAlCE,WACd,IAAMkB,EAAU,CAAErB,SAAUF,EAAMI,SAAUA,GAC5CO,EAAY,GAAD,mBAAKD,GAAL,CAAea,KAC1Bf,EAAQ,IACRC,EAAY,IA8BR,yBAEF,qBAAKN,UAAU,WAAf,SACGO,EAASc,KAAI,SAACxB,EAAayB,GAC1B,OAAO,cAAC,EAAD,CAAoBzB,KAAMA,EAAMC,aAAcA,GAA/BwB,YC1CjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dad144fb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ITask } from \"./../Interfaces\";\r\n\r\ninterface Props {\r\n  task: ITask;\r\n  completeTask(taskNameToDelete: string): void;\r\n}\r\n\r\nconst TodoTask = ({ task, completeTask }: Props) => {\r\n  if (task.taskName === \"\") {\r\n    task.taskName = \"Task\";\r\n  }\r\n  return (\r\n    <div className=\"task\">\r\n      <div className=\"content\">\r\n        <span>{task.taskName}</span>\r\n        <span>{task.deadline}</span>\r\n      </div>\r\n      <button onClick={() => completeTask(task.taskName)}>X</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTask;\r\n","import React, { FC, ChangeEvent, useState } from \"react\";\nimport \"./App.css\";\nimport { ITask } from \"./Interfaces\";\nimport TodoTask from \"./Components/TodoTask\";\n\nconst App: FC = () => {\n  const [task, setTask] = useState<string>(\"\");\n  const [deadline, setDeadline] = useState<number>(1);\n  const [todoList, setTodoList] = useState<ITask[]>([]);\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    if (event.target.name === \"task\") {\n      setTask(event.target.value);\n    } else {\n      setDeadline(Number(event.target.value));\n    }\n  };\n\n  const addTask = (): void => {\n    const newTask = { taskName: task, deadline: deadline };\n    setTodoList([...todoList, newTask]);\n    setTask(\"\");\n    setDeadline(1);\n  };\n\n  const completeTask = (taskNameToDelete: string): void => {\n    setTodoList(\n      todoList.filter((task) => {\n        return task.taskName !== taskNameToDelete;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div className=\"inputContainer\">\n          <input\n            type=\"text\"\n            placeholder=\"Task\"\n            name=\"task\"\n            value={task}\n            onChange={handleChange}\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Deadline (in Days)\"\n            name=\"deadline\"\n            value={deadline}\n            onChange={handleChange}\n          />\n        </div>\n        <button onClick={addTask}>Add Task</button>\n      </header>\n      <div className=\"todoList\">\n        {todoList.map((task: ITask, key: number) => {\n          return <TodoTask key={key} task={task} completeTask={completeTask} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}